1
00:00:03,000 --> 00:00:07,000
You've seen how we can attach events and event handlers directly to DOM elements throughout this module.

2
00:00:07,000 --> 00:00:15,000
Well jQuery provides some other really nice options that allow us to attach an event handler without really

3
00:00:15,000 --> 00:00:20,000
attaching an event handler. Here would be the scenario. Imagine you have a table that has a lot of rows

4
00:00:20,000 --> 00:00:26,000
in it; let's say it has a couple hundred rows. Well how do you know if the user clicks maybe on the tr

5
00:00:26,000 --> 00:00:33,000
or mouses over it? Well the normal reaction there is we'll write a selector to go find all the trs and

6
00:00:33,000 --> 00:00:37,000
attach an event handler—maybe a mouseenter, a mouseleave, and a click to every tr.

7
00:00:37,000 --> 00:00:44,000
Well if you had 300 rows then of course that means we're going to be adding 300 different event handlers,

8
00:00:44,000 --> 00:00:49,000
and that starts to build up in memory a little bit. So fortunately there are three different options that

9
00:00:49,000 --> 00:00:55,000
you can use in jQuery to handle this a little more efficiently and those three functions are called

10
00:00:55,000 --> 00:01:01,000
live, delegate, and on and we're going to be talking about these in this section.

11
00:01:01,000 --> 00:01:09,000
Now live, delegate, and on as mentioned provide a way to attach event handlers at a higher level and

12
00:01:09,000 --> 00:01:15,000
you probably know that JavaScript, when you click on things or mouseover, if nothing handles it at that

13
00:01:15,000 --> 00:01:20,000
DOM element then it bubbles up by default and a parent will then try to handle it, and then if they don't

14
00:01:20,000 --> 00:01:25,000
have one it bubbles up to its parent. And this is the standard way that events work with JavaScript.

15
00:01:25,000 --> 00:01:34,000
Well live, delegate, and on provide a really unique way to attach an event at a higher level in the DOM

16
00:01:34,000 --> 00:01:40,000
hierarchy so that when a child is clicked or mousedover, or whatever it may be it can actually bubble up.

17
00:01:40,000 --> 00:01:47,000
And so you'll see this provides a really efficient way to handle events in a variety of scenarios.

18
00:01:47,000 --> 00:01:55,000
So in a nutshell what it does is it allows children to be added into a container, such as a div or a table,

19
00:01:55,000 --> 00:01:59,000
and you don't explicitly have to attach an event handler to each child.

20
00:01:59,000 --> 00:02:05,000
Well let's go back to the row example; if you had 300 rows that means that depending on which of these

21
00:02:05,000 --> 00:02:11,000
functions you use you could attach an event handler at a higher level in the DOM hierarchy and as a child

22
00:02:11,000 --> 00:02:17,000
is clicked there is no event handler there, but it'll bubble up and then the parent will detect it.

23
00:02:17,000 --> 00:02:22,000
So let's dive in here and I'll give you some examples of how this works with each of these.

24
00:02:22,000 --> 00:02:27,000
So first up if live; now it's important to know that this is kind of an old API and it's been removed

25
00:02:27,000 --> 00:02:34,000
completely in jQuery 1.9. So if you're using an older version of jQuery then you could certainly use

26
00:02:34,000 --> 00:02:41,000
this, but jQuery 1.9 doesn't even have it at all. So why am I covering it??

27
00:02:41,000 --> 00:02:46,000
Well because you may see this in blog posts or other areas, and although you may not use it after I show

28
00:02:46,000 --> 00:02:53,000
these other options, it's important to know what it's for and how it works and why some of the other

29
00:02:53,000 --> 00:02:57,000
options are better, so we'll go over it just real quick here.

30
00:02:57,000 --> 00:03:03,000
So what you can do is do a selector, and in this case we're going to target everything that has some class

31
00:03:03,000 --> 00:03:06,000
on it and we're going to attach this live binding to it.

32
00:03:06,000 --> 00:03:14,000
And what's going to happen is anything that has some class on it—the click event won't actually be attached

33
00:03:14,000 --> 00:03:22,000
at the DOM element that has some class. Instead what'll happen is it'll bubble all the way up to the

34
00:03:22,000 --> 00:03:26,000
document object and you can see up here—the document object handles events by default.

35
00:03:26,000 --> 00:03:34,000
Now what'll happen is we'll have one function in memory that acts as the event handler, it'll be attached

36
00:03:34,000 --> 00:03:42,000
to the document object and now when any child that has some class is clicked in this case it'll bubble up.

37
00:03:42,000 --> 00:03:48,000
Now you can turn that behavior off by using the die, so a lot of people call this live because it kind of

38
00:03:48,000 --> 00:03:54,000
looks like that; I guess you could officially say it's live because there's a corresponding die but it

39
00:03:54,000 --> 00:04:00,000
really doesn't matter—you say tomato I say tomato. But we say die and click and give it the same function

40
00:04:00,000 --> 00:04:07,000
that was attached and what that'll do is basically detach the click and the event handler from the document object.

41
00:04:07,000 --> 00:04:11,000
So let's look at a more visual example of this.

42
00:04:11,000 --> 00:04:17,000
So you can see that I have some class as my selector and I'm going to attach this live meaning for the

43
00:04:17,000 --> 00:04:22,000
click and you're going to see that ultimately that's going to be attached up on the document object level.

44
00:04:22,000 --> 00:04:28,000
Now imagine that I had a span, and a p tag, and a div, and maybe some others that all have some class.

45
00:04:28,000 --> 00:04:37,000
Well normally if you did .some class for the class selector .click then we would have three different

46
00:04:37,000 --> 00:04:43,000
event handlers attached to a specific function for each of those that eats up a little more memory.

47
00:04:43,000 --> 00:04:50,000
Well because we're doing the live binding here the click event will actually cause a bubble up effect

48
00:04:50,000 --> 00:04:57,000
and the event will actually bubble up to the document object. Now the document object will actually look

49
00:04:57,000 --> 00:05:02,000
for all kinds of events, but in this case it's specifically going to monitor children that were clicked

50
00:05:02,000 --> 00:05:09,000
that have some class on them as a class. And so if it does the click event will be fired and then the event

51
00:05:09,000 --> 00:05:15,000
handler will be called. And so you can see now we only have one event handler and even if we had 1000

52
00:05:15,000 --> 00:05:21,000
elements with some class on it there would still only be one click event handler, so it's very efficient that way.

53
00:05:21,000 --> 00:05:28,000
Now the downside of this is it is bubbling all the way up to the document so let's look at another option.

54
00:05:28,000 --> 00:05:36,000
So a newer version of the kind of live concept is delegate. Now this was added in jQuery 1.4 as you can see

55
00:05:36,000 --> 00:05:42,000
and it's still available in jQuery 1.9 as well. And what it allows you to do is specify a context object—

56
00:05:42,000 --> 00:05:51,000
you're going to see that right in here—that actually is the parent that handles the bubble up events and

57
00:05:51,000 --> 00:05:56,000
then processes those events. So it works as new children are added into its container and will ‘

58
00:05:56,000 --> 00:06:00,000
automatically detect what child was clicked and if it's appropriate, will handle it.

59
00:06:00,000 --> 00:06:09,000
So here's an example of using delegate. So our context is going to be this # or hash Divs, so the ID

60
00:06:09,000 --> 00:06:11,000
with divs on it. We'll say that's just a div that's a container.

61
00:06:11,000 --> 00:06:19,000
We're going to delegate that when any child that's a div is clicked, call this function here.

62
00:06:19,000 --> 00:06:24,000
And then you can undo this by calling un-delegate, it's kind of like the die I just showed you.

63
00:06:24,000 --> 00:06:25,000
Now this works the same

64
00:06:25,000 --> 00:06:31,000
way visually; the difference is it's not going to bubble all the way up to the document so we have this

65
00:06:31,000 --> 00:06:38,000
#Divs for our ID selector, delegate, and in this case someClass is going to be our selector and what's

66
00:06:38,000 --> 00:06:45,000
going to happen is any child of this that has this class on it, when it's clicked it'll bubble up.

67
00:06:45,000 --> 00:06:50,000
So the same premise here. We could have a span, and a p tag, and a div and they might be in this

68
00:06:50,000 --> 00:06:55,000
wrapper div here, and when any of those are clicked they don't have an event handler on them so what'll

69
00:06:55,000 --> 00:07:00,000
happen is it'll bubble up, but instead of bubbling all the way up to the document it's actually going to

70
00:07:00,000 --> 00:07:06,000
go up to our context that we set, which is our divs here. Then if one of those was clicked the click

71
00:07:06,000 --> 00:07:12,000
event handler gets called and we're off and running, so very similar to the whole live binding concept

72
00:07:12,000 --> 00:07:16,000
but more specific and you don't have to bubble up as far.

73
00:07:16,000 --> 00:07:21,000
Now the next one I've already shown earlier in this module and that's the on function.

74
00:07:21,000 --> 00:07:28,000
Now as jQuery grew we had all these different ways we could handle events: we have bind I showed briefly,

75
00:07:28,000 --> 00:07:34,000
delegate we just looked at, live we just looked at, and the problem is it got a little bit confusing

76
00:07:34,000 --> 00:07:40,000
on which should I use in, you know, which scenario. And so I've already shown one example of using on,

77
00:07:40,000 --> 00:07:47,000
very similar to this earlier in the module. Any div on a click, call this function, and that's kind of

78
00:07:47,000 --> 00:07:57,000
the standard way that you'll see on. But it truly is a replacement for bind, delegate, and the whole live binding concept.

79
00:07:57,000 --> 00:08:04,000
And so now we have one API to rule them all and it makes it much easier to just go with one thing and be

80
00:08:04,000 --> 00:08:11,000
able to use it. Now on was actually added in jQuery 1.7 so it's been out for quite a while, and it can be

81
00:08:11,000 --> 00:08:16,000
used for simple things but it can also replace the whole live and delegate concept.

82
00:08:16,000 --> 00:08:24,000
So here's an example of we're going to set a context note and it's almost analogous to what I just showed

83
00:08:24,000 --> 00:08:26,000
with delegate, but things are reversed as far as the parameters.

84
00:08:26,000 --> 00:08:33,000
So in this example we're going to say go find this MyTable ID and find the tbody under it.

85
00:08:33,000 --> 00:08:43,000
On a click of a tr, bubble up to the tbody and this function will now be attached to the tbody.

86
00:08:43,000 --> 00:08:49,000
So just like delegate we can set a context, but this one allows us to I think find a more readable solution.

87
00:08:49,000 --> 00:08:59,000
So on a tbody on click for a tr, invoke this function. Now we could also in the tr we could do that

88
00:08:59,000 --> 00:09:05,000
someClass I just talked about earlier. So this is the preferred way now to do this and so you really

89
00:09:05,000 --> 00:09:12,000
don't need to use bind, live, delegate, or those at all, because you can do everything with on.

90
00:09:12,000 --> 00:09:20,000
So as long as you're on jQuery 1.7 or higher, which odds are you are, then I would recommend you go with on here.

91
00:09:20,000 --> 00:09:26,000
Now you can also map on to multiple types of events and callbacks.

92
00:09:26,000 --> 00:09:32,000
In fact, you can even say in addition to having mouseenter and mouseleave call the same event handler

93
00:09:32,000 --> 00:09:38,000
function, which I showed earlier in this module, you can even map them to different callback functions.

94
00:09:38,000 --> 00:09:46,000
So here's an example of doing that with what we call a map. You'll notice that we say for a tr on

95
00:09:46,000 --> 00:09:50,000
and then we have an object literal here, so here's the start of it, there's the end of it.

96
00:09:50,000 --> 00:09:58,000
We're going to say when the mouseenter fires call this function, when the mouseleave fires call this

97
00:09:58,000 --> 00:10:04,000
function, then if I had more I could keep putting commas. So you could just put all these as one big

98
00:10:04,000 --> 00:10:10,000
stint on as the first parameter and have a single callback or you can do this map and actually map an

99
00:10:10,000 --> 00:10:16,000
event to a specific callback function, so very, very nice to know about and very handy and I think

100
00:10:16,000 --> 00:10:22,000
good for maintenance and productivity over all. So on can be used for simple things like clicks;

101
00:10:22,000 --> 00:10:27,000
it can be used for the bubble up concept, which I'm going to demonstrate here in a moment, and you can

102
00:10:27,000 --> 00:10:33,000
even map events to their own individual callback functions, which is really, really nice.

103
00:10:33,000 --> 00:10:38,000
So now that we've seen the different options let's jump into a demonstration and I'm going to focus on

104
00:10:38,000 --> 00:10:44,000
on because that's what we should be using, but keep in mind that you can do similar things as what I'm

105
00:10:44,000 --> 00:59:00,000
going to demo with the live or the delegate. So let's go ahead and get started here.

